diff --git a/.gitignore b/.gitignore
index 61fa39967b..7c15bae377 100644
--- a/.gitignore
+++ b/.gitignore
@@ -20,3 +20,13 @@ GTAGS
 *.swp
 *.patch
 *.gcov
+
+build-cfi-no-debug/
+build-cfi/
+build-no-cfi/
+build-addr-san/
+build-mem-san/
+build-thread-san/
+compile_commands.json
+_codeql_detected_source_root
+build-codeql/
diff --git a/hw/virtio/vhost.c b/hw/virtio/vhost.c
index f50180e60e..5818637389 100644
--- a/hw/virtio/vhost.c
+++ b/hw/virtio/vhost.c
@@ -1431,6 +1431,7 @@ static void vhost_virtqueue_cleanup(struct vhost_virtqueue *vq)
     }
 }
 
+__attribute__((no_sanitize("cfi")))
 int vhost_dev_init(struct vhost_dev *hdev, void *opaque,
                    VhostBackendType backend_type, uint32_t busyloop_timeout,
                    Error **errp)
@@ -1445,32 +1446,72 @@ int vhost_dev_init(struct vhost_dev *hdev, void *opaque,
     r = vhost_set_backend_type(hdev, backend_type);
     assert(r >= 0);
 
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     r = hdev->vhost_ops->vhost_backend_init(hdev, opaque, errp);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
     if (r < 0) {
         goto fail;
     }
 
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     r = hdev->vhost_ops->vhost_set_owner(hdev);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
     if (r < 0) {
         error_setg_errno(errp, -r, "vhost_set_owner failed");
         goto fail;
     }
 
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     r = hdev->vhost_ops->vhost_get_features(hdev, &features);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
     if (r < 0) {
         error_setg_errno(errp, -r, "vhost_get_features failed");
         goto fail;
     }
 
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     limit = hdev->vhost_ops->vhost_backend_memslots_limit(hdev);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
     if (limit < MEMORY_DEVICES_SAFE_MAX_MEMSLOTS &&
         memory_devices_memslot_auto_decision_active()) {
         error_setg(errp, "some memory device (like virtio-mem)"
-            " decided how many memory slots to use based on the overall"
-            " number of memory slots; this vhost backend would further"
-            " restricts the overall number of memory slots");
+                   " decided how many memory slots to use based on the overall"
+                   " number of memory slots; this vhost backend would further"
+                   " restricts the overall number of memory slots");
         error_append_hint(errp, "Try plugging this vhost backend before"
-            " plugging such memory devices.\n");
+                          " plugging such memory devices.\n");
         r = -EINVAL;
         goto fail;
     }
@@ -1547,12 +1588,24 @@ int vhost_dev_init(struct vhost_dev *hdev, void *opaque,
      * The listener we registered properly updated the corresponding counter.
      * So we can trust that these values are accurate.
      */
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     if (hdev->vhost_ops->vhost_backend_no_private_memslots &&
         hdev->vhost_ops->vhost_backend_no_private_memslots(hdev)) {
         used = used_shared_memslots;
     } else {
         used = used_memslots;
     }
+
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
+
     /*
      * We assume that all reserved memslots actually require a real memslot
      * in our vhost backend. This might not be true, for example, if the
