diff --git a/.gitignore b/.gitignore
index 61fa39967b..7c15bae377 100644
--- a/.gitignore
+++ b/.gitignore
@@ -20,3 +20,13 @@ GTAGS
 *.swp
 *.patch
 *.gcov
+
+build-cfi-no-debug/
+build-cfi/
+build-no-cfi/
+build-addr-san/
+build-mem-san/
+build-thread-san/
+compile_commands.json
+_codeql_detected_source_root
+build-codeql/
diff --git a/accel/tcg/cpu-exec.c b/accel/tcg/cpu-exec.c
index 5c70748060..9dc0c5a50a 100644
--- a/accel/tcg/cpu-exec.c
+++ b/accel/tcg/cpu-exec.c
@@ -445,7 +445,17 @@ cpu_tb_exec(CPUState *cpu, TranslationBlock *itb, int *tb_exit)
     }
 
     qemu_thread_jit_execute();
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     ret = tcg_qemu_tb_exec(cpu_env(cpu), tb_ptr);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
     cpu->neg.can_do_io = true;
     qemu_plugin_disable_mem_helpers(cpu);
     /*
@@ -470,11 +480,33 @@ cpu_tb_exec(CPUState *cpu, TranslationBlock *itb, int *tb_exit)
         const TCGCPUOps *tcg_ops = cc->tcg_ops;
 
         if (tcg_ops->synchronize_from_tb) {
+
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_START_%=\n"
+                ".global_DEBUG_LABEL_START_%=:\n"
+                :
+            );
             tcg_ops->synchronize_from_tb(cpu, last_tb);
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_END_%=\n"
+                ".global_DEBUG_LABEL_END_%=:\n"
+                :
+            );
         } else {
             tcg_debug_assert(!(tb_cflags(last_tb) & CF_PCREL));
             assert(cc->set_pc);
+
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_START_%=\n"
+                ".global_DEBUG_LABEL_START_%=:\n"
+                :
+            );
             cc->set_pc(cpu, last_tb->pc);
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_END_%=\n"
+                ".global_DEBUG_LABEL_END_%=:\n"
+                :
+            );
         }
         if (qemu_loglevel_mask(CPU_LOG_EXEC)) {
             vaddr pc = log_pc(cpu, last_tb);
diff --git a/plugins/core.c b/plugins/core.c
index 11ca20e626..2a4a305baf 100644
--- a/plugins/core.c
+++ b/plugins/core.c
@@ -107,8 +107,17 @@ static void plugin_vcpu_cb__simple(CPUState *cpu, enum qemu_plugin_event ev)
         /* iterate safely; plugins might uninstall themselves at any time */
         QLIST_FOREACH_SAFE_RCU(cb, &plugin.cb_lists[ev], entry, next) {
             qemu_plugin_vcpu_simple_cb_t func = cb->f.vcpu_simple;
-
-            func(cb->ctx->id, cpu->cpu_index);
+                asm volatile(
+                    "jmp .global_DEBUG_LABEL_START_%=\n"
+                    ".global_DEBUG_LABEL_START_%=:\n"
+                    :
+                );
+                func(cb->ctx->id, cpu->cpu_index);
+                asm volatile(
+                    "jmp .global_DEBUG_LABEL_END_%=\n"
+                    ".global_DEBUG_LABEL_END_%=:\n"
+                    :
+                );
         }
         break;
     default:
@@ -131,7 +140,16 @@ static void plugin_cb__simple(enum qemu_plugin_event ev)
         QLIST_FOREACH_SAFE_RCU(cb, &plugin.cb_lists[ev], entry, next) {
             qemu_plugin_simple_cb_t func = cb->f.simple;
 
-            func(cb->ctx->id);
+                asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                    ".global_DEBUG_LABEL_START_%=:\n"
+                    :
+                );
+                func(cb->ctx->id);
+                asm volatile(
+                    "jmp .global_DEBUG_LABEL_END_%=\n"
+                    ".global_DEBUG_LABEL_END_%=:\n"
+                    :
+                );
         }
         break;
     default:
@@ -154,7 +172,17 @@ static void plugin_cb__udata(enum qemu_plugin_event ev)
         QLIST_FOREACH_SAFE_RCU(cb, &plugin.cb_lists[ev], entry, next) {
             qemu_plugin_udata_cb_t func = cb->f.udata;
 
-            func(cb->ctx->id, cb->udata);
+                asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                    ".global_DEBUG_LABEL_START_%=:\n"
+                    :
+                );
+
+                func(cb->ctx->id, cb->udata);
+                asm volatile(
+                    "jmp .global_DEBUG_LABEL_END_%=\n"
+                    ".global_DEBUG_LABEL_END_%=:\n"
+                    :
+                );
         }
         break;
     default:
@@ -378,7 +406,16 @@ void qemu_plugin_tb_trans_cb(CPUState *cpu, struct qemu_plugin_tb *tb)
     QLIST_FOREACH_SAFE_RCU(cb, &plugin.cb_lists[ev], entry, next) {
         qemu_plugin_vcpu_tb_trans_cb_t func = cb->f.vcpu_tb_trans;
 
-        func(cb->ctx->id, tb);
+    asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
+            func(cb->ctx->id, tb);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
     }
 }
 
@@ -403,7 +440,16 @@ qemu_plugin_vcpu_syscall(CPUState *cpu, int64_t num, uint64_t a1, uint64_t a2,
     QLIST_FOREACH_SAFE_RCU(cb, &plugin.cb_lists[ev], entry, next) {
         qemu_plugin_vcpu_syscall_cb_t func = cb->f.vcpu_syscall;
 
+        asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+            ".global_DEBUG_LABEL_START_%=:\n"
+            :
+        );
         func(cb->ctx->id, cpu->cpu_index, num, a1, a2, a3, a4, a5, a6, a7, a8);
+        asm volatile(
+            "jmp .global_DEBUG_LABEL_END_%=\n"
+            ".global_DEBUG_LABEL_END_%=:\n"
+            :
+        );
     }
 }
 
@@ -425,7 +471,16 @@ void qemu_plugin_vcpu_syscall_ret(CPUState *cpu, int64_t num, int64_t ret)
     QLIST_FOREACH_SAFE_RCU(cb, &plugin.cb_lists[ev], entry, next) {
         qemu_plugin_vcpu_syscall_ret_cb_t func = cb->f.vcpu_syscall_ret;
 
+        asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+            ".global_DEBUG_LABEL_START_%=:\n"
+            :
+        );
         func(cb->ctx->id, cpu->cpu_index, num, ret);
+        asm volatile(
+            "jmp .global_DEBUG_LABEL_END_%=\n"
+            ".global_DEBUG_LABEL_END_%=:\n"
+            :
+        );
     }
 }
 
diff --git a/plugins/loader.c b/plugins/loader.c
index 513a429c57..5989ad3b56 100644
--- a/plugins/loader.c
+++ b/plugins/loader.c
@@ -221,7 +221,16 @@ static int plugin_load(struct qemu_plugin_desc *desc, const qemu_info_t *info, E
         }
     }
 
+    asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     qemu_rec_mutex_lock(&plugin.lock);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
 
     /* find an unused random id with &ctx as the seed */
     ctx->id = (uint64_t)(uintptr_t)ctx;
@@ -240,7 +249,16 @@ static int plugin_load(struct qemu_plugin_desc *desc, const qemu_info_t *info, E
     }
     QTAILQ_INSERT_TAIL(&plugin.ctxs, ctx, entry);
     ctx->installing = true;
+    asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     rc = install(ctx->id, info, desc->argc, desc->argv);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
     ctx->installing = false;
     if (rc) {
         error_setg(errp, "Could not load plugin %s: qemu_plugin_install returned error code %d",
@@ -254,7 +272,16 @@ static int plugin_load(struct qemu_plugin_desc *desc, const qemu_info_t *info, E
         }
     }
 
+    asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     qemu_rec_mutex_unlock(&plugin.lock);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
     return rc;
 
  err_symbol:
diff --git a/tcg/tci.c b/tcg/tci.c
index 39adcb7d82..dc933b171a 100644
--- a/tcg/tci.c
+++ b/tcg/tci.c
@@ -394,6 +394,7 @@ uintptr_t QEMU_DISABLE_CFI tcg_qemu_tb_exec(CPUArchState *env,
                 unsigned i, s, n;
 
                 tci_args_nl(insn, tb_ptr, &len, &ptr);
+
                 func = ((void **)ptr)[0];
                 cif = ((void **)ptr)[1];
 
@@ -406,7 +407,19 @@ uintptr_t QEMU_DISABLE_CFI tcg_qemu_tb_exec(CPUArchState *env,
 
                 /* Helper functions may need to access the "return address" */
                 tci_tb_ptr = (uintptr_t)tb_ptr;
-                ffi_call(cif, func, stack, call_slots);
+
+                     
+                    asm volatile(
+                        "jmp .global_DEBUG_LABEL_START_%=\n"
+                        ".global_DEBUG_LABEL_START_%=:\n"
+                        :
+                    );
+                    ffi_call(cif, func, stack, call_slots);
+                    asm volatile(
+                        "jmp .global_DEBUG_LABEL_END_%=\n"
+                        ".global_DEBUG_LABEL_END_%=:\n"
+                        :
+                    );
             }
 
             switch (len) {
diff --git a/util/main-loop.c b/util/main-loop.c
index a0386cfeb6..0d018dbc89 100644
--- a/util/main-loop.c
+++ b/util/main-loop.c
@@ -63,7 +63,17 @@ static void sigfd_handler(void *opaque)
     ssize_t len;
 
     while (1) {
+
+        asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+            ".global_DEBUG_LABEL_START_%=:\n"
+            :
+        );
         len = RETRY_ON_EINTR(read(fd, &info, sizeof(info)));
+        asm volatile(
+            "jmp .global_DEBUG_LABEL_END_%=\n"
+            ".global_DEBUG_LABEL_END_%=:\n"
+            :
+        );
 
         if (len == -1 && errno == EAGAIN) {
             break;
@@ -79,7 +89,18 @@ static void sigfd_handler(void *opaque)
         if ((action.sa_flags & SA_SIGINFO) && action.sa_sigaction) {
             sigaction_invoke(&action, &info);
         } else if (action.sa_handler) {
+
+
+            asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                ".global_DEBUG_LABEL_START_%=:\n"
+                :
+            );
             action.sa_handler(info.ssi_signo);
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_END_%=\n"
+                ".global_DEBUG_LABEL_END_%=:\n"
+                :
+            );
         }
     }
 }
diff --git a/util/oslib-posix.c b/util/oslib-posix.c
index e76441695b..3070be9d59 100644
--- a/util/oslib-posix.c
+++ b/util/oslib-posix.c
@@ -772,7 +772,17 @@ void sigaction_invoke(struct sigaction *action,
         si.si_status = info->ssi_status;
         si.si_uid = info->ssi_uid;
     }
+
+    asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+        ".global_DEBUG_LABEL_START_%=:\n"
+        :
+    );
     action->sa_sigaction(info->ssi_signo, &si, NULL);
+    asm volatile(
+        "jmp .global_DEBUG_LABEL_END_%=\n"
+        ".global_DEBUG_LABEL_END_%=:\n"
+        :
+    );
 }
 
 size_t qemu_get_host_physmem(void)
diff --git a/util/qtree.c b/util/qtree.c
index 31f0b46182..e256ab4077 100644
--- a/util/qtree.c
+++ b/util/qtree.c
@@ -324,10 +324,28 @@ q_tree_remove_all(QTree *tree)
         next = q_tree_node_next(node);
 
         if (tree->key_destroy_func) {
+            asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                ".global_DEBUG_LABEL_START_%=:\n"
+                :
+            );
             tree->key_destroy_func(node->key);
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_END_%=\n"
+                ".global_DEBUG_LABEL_END_%=:\n"
+                :
+            );
         }
         if (tree->value_destroy_func) {
+            asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                ".global_DEBUG_LABEL_START_%=:\n"
+                :
+            );
             tree->value_destroy_func(node->value);
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_END_%=\n"
+                ".global_DEBUG_LABEL_END_%=:\n"
+                :
+            );
         }
         g_free(node);
 
@@ -555,25 +573,62 @@ q_tree_insert_internal(QTree    *tree,
     node = tree->root;
 
     while (1) {
+
+        asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+            ".global_DEBUG_LABEL_START_%=:\n"
+            :
+        );
         int cmp = tree->key_compare(key, node->key, tree->key_compare_data);
+        asm volatile(
+            "jmp .global_DEBUG_LABEL_END_%=\n"
+            ".global_DEBUG_LABEL_END_%=:\n"
+            :
+        );
 
         if (cmp == 0) {
             if (tree->value_destroy_func) {
+                asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                    ".global_DEBUG_LABEL_START_%=:\n"
+                    :
+                );
                 tree->value_destroy_func(node->value);
+                asm volatile(
+                    "jmp .global_DEBUG_LABEL_END_%=\n"
+                    ".global_DEBUG_LABEL_END_%=:\n"
+                    :
+                );
             }
 
             node->value = value;
 
             if (replace) {
                 if (tree->key_destroy_func) {
+                    asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                        ".global_DEBUG_LABEL_START_%=:\n"
+                        :
+                    );
                     tree->key_destroy_func(node->key);
+                    asm volatile(
+                        "jmp .global_DEBUG_LABEL_END_%=\n"
+                        ".global_DEBUG_LABEL_END_%=:\n"
+                        :
+                    );
                 }
 
                 node->key = key;
             } else {
                 /* free the passed key */
                 if (tree->key_destroy_func) {
+                    asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                        ".global_DEBUG_LABEL_START_%=:\n"
+                        :
+                    );
                     tree->key_destroy_func(key);
+                    asm volatile(
+                        "jmp .global_DEBUG_LABEL_END_%=\n"
+                        ".global_DEBUG_LABEL_END_%=:\n"
+                        :
+                    );
                 }
             }
 
@@ -742,7 +797,16 @@ q_tree_remove_internal(QTree         *tree,
     node = tree->root;
 
     while (1) {
+        asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+            ".global_DEBUG_LABEL_START_%=:\n"
+            :
+        );
         int cmp = tree->key_compare(key, node->key, tree->key_compare_data);
+        asm volatile(
+            "jmp .global_DEBUG_LABEL_END_%=\n"
+            ".global_DEBUG_LABEL_END_%=:\n"
+            :
+        );
 
         if (cmp == 0) {
             break;
@@ -904,10 +968,28 @@ q_tree_remove_internal(QTree         *tree,
 
     if (!steal) {
         if (tree->key_destroy_func) {
+            asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                ".global_DEBUG_LABEL_START_%=:\n"
+                :
+            );
             tree->key_destroy_func(node->key);
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_END_%=\n"
+                ".global_DEBUG_LABEL_END_%=:\n"
+                :
+            );
         }
         if (tree->value_destroy_func) {
+            asm volatile( "jmp .global_DEBUG_LABEL_START_%=\n"
+                ".global_DEBUG_LABEL_START_%=:\n"
+                :
+            );
             tree->value_destroy_func(node->value);
+            asm volatile(
+                "jmp .global_DEBUG_LABEL_END_%=\n"
+                ".global_DEBUG_LABEL_END_%=:\n"
+                :
+            );
         }
     }
 
@@ -1195,7 +1277,18 @@ q_tree_find_node(QTree        *tree,
     }
 
     while (1) {
+
+        asm volatile(
+                "jmp .global_DEBUG_LABEL_START_%=\n"
+                ".global_DEBUG_LABEL_START_%=:\n"
+              :
+            );
         cmp = tree->key_compare(key, node->key, tree->key_compare_data);
+        asm volatile(
+                "jmp .global_DEBUG_LABEL_END_%=\n"
+                ".global_DEBUG_LABEL_END_%=:\n"
+              :
+            );
         if (cmp == 0) {
             return node;
         } else if (cmp < 0) {
